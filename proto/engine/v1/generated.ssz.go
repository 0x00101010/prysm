// Code generated by fastssz. DO NOT EDIT.
// Hash: c62cbdccd0799db6cd92108be64893f8b6587c92531601ceec560ab9e11faae7
package enginev1

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExecutionPayload object
func (e *ExecutionPayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayload object to a target array
func (e *ExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(508)

	// Field (0) 'ParentHash'
	if len(e.ParentHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ParentHash...)

	// Field (1) 'FeeRecipient'
	if len(e.FeeRecipient) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.FeeRecipient...)

	// Field (2) 'StateRoot'
	if len(e.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.StateRoot...)

	// Field (3) 'ReceiptsRoot'
	if len(e.ReceiptsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ReceiptsRoot...)

	// Field (4) 'LogsBloom'
	if len(e.LogsBloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.LogsBloom...)

	// Field (5) 'Random'
	if len(e.Random) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.Random...)

	// Field (6) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, e.BlockNumber)

	// Field (7) 'GasLimit'
	dst = ssz.MarshalUint64(dst, e.GasLimit)

	// Field (8) 'GasUsed'
	dst = ssz.MarshalUint64(dst, e.GasUsed)

	// Field (9) 'Timestamp'
	dst = ssz.MarshalUint64(dst, e.Timestamp)

	// Offset (10) 'ExtraData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ExtraData)

	// Field (11) 'BaseFeePerGas'
	if len(e.BaseFeePerGas) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.BaseFeePerGas...)

	// Field (12) 'BlockHash'
	if len(e.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.BlockHash...)

	// Offset (13) 'Transactions'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.Transactions); ii++ {
		offset += 4
		offset += len(e.Transactions[ii])
	}

	// Field (10) 'ExtraData'
	if len(e.ExtraData) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ExtraData...)

	// Field (13) 'Transactions'
	if len(e.Transactions) > 1048576 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(e.Transactions)
		for ii := 0; ii < len(e.Transactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(e.Transactions[ii])
		}
	}
	for ii := 0; ii < len(e.Transactions); ii++ {
		if len(e.Transactions[ii]) > 1073741824 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, e.Transactions[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayload object
func (e *ExecutionPayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 508 {
		return ssz.ErrSize
	}

	tail := buf
	var o10, o13 uint64

	// Field (0) 'ParentHash'
	if cap(e.ParentHash) == 0 {
		e.ParentHash = make([]byte, 0, len(buf[0:32]))
	}
	e.ParentHash = append(e.ParentHash, buf[0:32]...)

	// Field (1) 'FeeRecipient'
	if cap(e.FeeRecipient) == 0 {
		e.FeeRecipient = make([]byte, 0, len(buf[32:52]))
	}
	e.FeeRecipient = append(e.FeeRecipient, buf[32:52]...)

	// Field (2) 'StateRoot'
	if cap(e.StateRoot) == 0 {
		e.StateRoot = make([]byte, 0, len(buf[52:84]))
	}
	e.StateRoot = append(e.StateRoot, buf[52:84]...)

	// Field (3) 'ReceiptsRoot'
	if cap(e.ReceiptsRoot) == 0 {
		e.ReceiptsRoot = make([]byte, 0, len(buf[84:116]))
	}
	e.ReceiptsRoot = append(e.ReceiptsRoot, buf[84:116]...)

	// Field (4) 'LogsBloom'
	if cap(e.LogsBloom) == 0 {
		e.LogsBloom = make([]byte, 0, len(buf[116:372]))
	}
	e.LogsBloom = append(e.LogsBloom, buf[116:372]...)

	// Field (5) 'Random'
	if cap(e.Random) == 0 {
		e.Random = make([]byte, 0, len(buf[372:404]))
	}
	e.Random = append(e.Random, buf[372:404]...)

	// Field (6) 'BlockNumber'
	e.BlockNumber = ssz.UnmarshallUint64(buf[404:412])

	// Field (7) 'GasLimit'
	e.GasLimit = ssz.UnmarshallUint64(buf[412:420])

	// Field (8) 'GasUsed'
	e.GasUsed = ssz.UnmarshallUint64(buf[420:428])

	// Field (9) 'Timestamp'
	e.Timestamp = ssz.UnmarshallUint64(buf[428:436])

	// Offset (10) 'ExtraData'
	if o10 = ssz.ReadOffset(buf[436:440]); o10 > size {
		return ssz.ErrOffset
	}

	if o10 < 508 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (11) 'BaseFeePerGas'
	if cap(e.BaseFeePerGas) == 0 {
		e.BaseFeePerGas = make([]byte, 0, len(buf[440:472]))
	}
	e.BaseFeePerGas = append(e.BaseFeePerGas, buf[440:472]...)

	// Field (12) 'BlockHash'
	if cap(e.BlockHash) == 0 {
		e.BlockHash = make([]byte, 0, len(buf[472:504]))
	}
	e.BlockHash = append(e.BlockHash, buf[472:504]...)

	// Offset (13) 'Transactions'
	if o13 = ssz.ReadOffset(buf[504:508]); o13 > size || o10 > o13 {
		return ssz.ErrOffset
	}

	// Field (10) 'ExtraData'
	{
		buf = tail[o10:o13]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(e.ExtraData) == 0 {
			e.ExtraData = make([]byte, 0, len(buf))
		}
		e.ExtraData = append(e.ExtraData, buf...)
	}

	// Field (13) 'Transactions'
	{
		buf = tail[o13:]
		num, err := ssz.DecodeDynamicLength(buf, 1048576)
		if err != nil {
			return err
		}
		e.Transactions = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1073741824 {
				return ssz.ErrBytesLength
			}
			if cap(e.Transactions[indx]) == 0 {
				e.Transactions[indx] = make([]byte, 0, len(buf))
			}
			e.Transactions[indx] = append(e.Transactions[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayload object
func (e *ExecutionPayload) SizeSSZ() (size int) {
	size = 508

	// Field (10) 'ExtraData'
	size += len(e.ExtraData)

	// Field (13) 'Transactions'
	for ii := 0; ii < len(e.Transactions); ii++ {
		size += 4
		size += len(e.Transactions[ii])
	}

	return
}

// HashTreeRoot ssz hashes the ExecutionPayload object
func (e *ExecutionPayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayload object with a hasher
func (e *ExecutionPayload) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentHash'
	if len(e.ParentHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.ParentHash)

	// Field (1) 'FeeRecipient'
	if len(e.FeeRecipient) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.FeeRecipient)

	// Field (2) 'StateRoot'
	if len(e.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.StateRoot)

	// Field (3) 'ReceiptsRoot'
	if len(e.ReceiptsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.ReceiptsRoot)

	// Field (4) 'LogsBloom'
	if len(e.LogsBloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.LogsBloom)

	// Field (5) 'Random'
	if len(e.Random) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.Random)

	// Field (6) 'BlockNumber'
	hh.PutUint64(e.BlockNumber)

	// Field (7) 'GasLimit'
	hh.PutUint64(e.GasLimit)

	// Field (8) 'GasUsed'
	hh.PutUint64(e.GasUsed)

	// Field (9) 'Timestamp'
	hh.PutUint64(e.Timestamp)

	// Field (10) 'ExtraData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.ExtraData))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(e.ExtraData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (11) 'BaseFeePerGas'
	if len(e.BaseFeePerGas) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.BaseFeePerGas)

	// Field (12) 'BlockHash'
	if len(e.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.BlockHash)

	// Field (13) 'Transactions'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Transactions))
		if num > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Transactions {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1073741824 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1073741824+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1048576)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ExecutionPayloadWithBlobTxs object
func (e *ExecutionPayloadWithBlobTxs) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayloadWithBlobTxs object to a target array
func (e *ExecutionPayloadWithBlobTxs) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(512)

	// Field (0) 'ParentHash'
	if len(e.ParentHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ParentHash...)

	// Field (1) 'FeeRecipient'
	if len(e.FeeRecipient) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.FeeRecipient...)

	// Field (2) 'StateRoot'
	if len(e.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.StateRoot...)

	// Field (3) 'ReceiptsRoot'
	if len(e.ReceiptsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ReceiptsRoot...)

	// Field (4) 'LogsBloom'
	if len(e.LogsBloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.LogsBloom...)

	// Field (5) 'Random'
	if len(e.Random) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.Random...)

	// Field (6) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, e.BlockNumber)

	// Field (7) 'GasLimit'
	dst = ssz.MarshalUint64(dst, e.GasLimit)

	// Field (8) 'GasUsed'
	dst = ssz.MarshalUint64(dst, e.GasUsed)

	// Field (9) 'Timestamp'
	dst = ssz.MarshalUint64(dst, e.Timestamp)

	// Offset (10) 'ExtraData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ExtraData)

	// Field (11) 'BaseFeePerGas'
	if len(e.BaseFeePerGas) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.BaseFeePerGas...)

	// Field (12) 'BlockHash'
	if len(e.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.BlockHash...)

	// Offset (13) 'Transactions'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.Transactions); ii++ {
		offset += 4
		offset += len(e.Transactions[ii])
	}

	// Offset (14) 'BlobTransactions'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(e.BlobTransactions); ii++ {
		offset += 4
		offset += e.BlobTransactions[ii].SizeSSZ()
	}

	// Field (10) 'ExtraData'
	if len(e.ExtraData) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.ExtraData...)

	// Field (13) 'Transactions'
	if len(e.Transactions) > 1048576 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(e.Transactions)
		for ii := 0; ii < len(e.Transactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(e.Transactions[ii])
		}
	}
	for ii := 0; ii < len(e.Transactions); ii++ {
		if len(e.Transactions[ii]) > 1073741824 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, e.Transactions[ii]...)
	}

	// Field (14) 'BlobTransactions'
	if len(e.BlobTransactions) > 1073741824 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(e.BlobTransactions)
		for ii := 0; ii < len(e.BlobTransactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += e.BlobTransactions[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(e.BlobTransactions); ii++ {
		if dst, err = e.BlobTransactions[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayloadWithBlobTxs object
func (e *ExecutionPayloadWithBlobTxs) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 512 {
		return ssz.ErrSize
	}

	tail := buf
	var o10, o13, o14 uint64

	// Field (0) 'ParentHash'
	if cap(e.ParentHash) == 0 {
		e.ParentHash = make([]byte, 0, len(buf[0:32]))
	}
	e.ParentHash = append(e.ParentHash, buf[0:32]...)

	// Field (1) 'FeeRecipient'
	if cap(e.FeeRecipient) == 0 {
		e.FeeRecipient = make([]byte, 0, len(buf[32:52]))
	}
	e.FeeRecipient = append(e.FeeRecipient, buf[32:52]...)

	// Field (2) 'StateRoot'
	if cap(e.StateRoot) == 0 {
		e.StateRoot = make([]byte, 0, len(buf[52:84]))
	}
	e.StateRoot = append(e.StateRoot, buf[52:84]...)

	// Field (3) 'ReceiptsRoot'
	if cap(e.ReceiptsRoot) == 0 {
		e.ReceiptsRoot = make([]byte, 0, len(buf[84:116]))
	}
	e.ReceiptsRoot = append(e.ReceiptsRoot, buf[84:116]...)

	// Field (4) 'LogsBloom'
	if cap(e.LogsBloom) == 0 {
		e.LogsBloom = make([]byte, 0, len(buf[116:372]))
	}
	e.LogsBloom = append(e.LogsBloom, buf[116:372]...)

	// Field (5) 'Random'
	if cap(e.Random) == 0 {
		e.Random = make([]byte, 0, len(buf[372:404]))
	}
	e.Random = append(e.Random, buf[372:404]...)

	// Field (6) 'BlockNumber'
	e.BlockNumber = ssz.UnmarshallUint64(buf[404:412])

	// Field (7) 'GasLimit'
	e.GasLimit = ssz.UnmarshallUint64(buf[412:420])

	// Field (8) 'GasUsed'
	e.GasUsed = ssz.UnmarshallUint64(buf[420:428])

	// Field (9) 'Timestamp'
	e.Timestamp = ssz.UnmarshallUint64(buf[428:436])

	// Offset (10) 'ExtraData'
	if o10 = ssz.ReadOffset(buf[436:440]); o10 > size {
		return ssz.ErrOffset
	}

	if o10 < 512 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (11) 'BaseFeePerGas'
	if cap(e.BaseFeePerGas) == 0 {
		e.BaseFeePerGas = make([]byte, 0, len(buf[440:472]))
	}
	e.BaseFeePerGas = append(e.BaseFeePerGas, buf[440:472]...)

	// Field (12) 'BlockHash'
	if cap(e.BlockHash) == 0 {
		e.BlockHash = make([]byte, 0, len(buf[472:504]))
	}
	e.BlockHash = append(e.BlockHash, buf[472:504]...)

	// Offset (13) 'Transactions'
	if o13 = ssz.ReadOffset(buf[504:508]); o13 > size || o10 > o13 {
		return ssz.ErrOffset
	}

	// Offset (14) 'BlobTransactions'
	if o14 = ssz.ReadOffset(buf[508:512]); o14 > size || o13 > o14 {
		return ssz.ErrOffset
	}

	// Field (10) 'ExtraData'
	{
		buf = tail[o10:o13]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(e.ExtraData) == 0 {
			e.ExtraData = make([]byte, 0, len(buf))
		}
		e.ExtraData = append(e.ExtraData, buf...)
	}

	// Field (13) 'Transactions'
	{
		buf = tail[o13:o14]
		num, err := ssz.DecodeDynamicLength(buf, 1048576)
		if err != nil {
			return err
		}
		e.Transactions = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1073741824 {
				return ssz.ErrBytesLength
			}
			if cap(e.Transactions[indx]) == 0 {
				e.Transactions[indx] = make([]byte, 0, len(buf))
			}
			e.Transactions[indx] = append(e.Transactions[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (14) 'BlobTransactions'
	{
		buf = tail[o14:]
		num, err := ssz.DecodeDynamicLength(buf, 1073741824)
		if err != nil {
			return err
		}
		e.BlobTransactions = make([]*SignedBlobTransaction, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if e.BlobTransactions[indx] == nil {
				e.BlobTransactions[indx] = new(SignedBlobTransaction)
			}
			if err = e.BlobTransactions[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayloadWithBlobTxs object
func (e *ExecutionPayloadWithBlobTxs) SizeSSZ() (size int) {
	size = 512

	// Field (10) 'ExtraData'
	size += len(e.ExtraData)

	// Field (13) 'Transactions'
	for ii := 0; ii < len(e.Transactions); ii++ {
		size += 4
		size += len(e.Transactions[ii])
	}

	// Field (14) 'BlobTransactions'
	for ii := 0; ii < len(e.BlobTransactions); ii++ {
		size += 4
		size += e.BlobTransactions[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the ExecutionPayloadWithBlobTxs object
func (e *ExecutionPayloadWithBlobTxs) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayloadWithBlobTxs object with a hasher
func (e *ExecutionPayloadWithBlobTxs) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentHash'
	if len(e.ParentHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.ParentHash)

	// Field (1) 'FeeRecipient'
	if len(e.FeeRecipient) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.FeeRecipient)

	// Field (2) 'StateRoot'
	if len(e.StateRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.StateRoot)

	// Field (3) 'ReceiptsRoot'
	if len(e.ReceiptsRoot) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.ReceiptsRoot)

	// Field (4) 'LogsBloom'
	if len(e.LogsBloom) != 256 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.LogsBloom)

	// Field (5) 'Random'
	if len(e.Random) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.Random)

	// Field (6) 'BlockNumber'
	hh.PutUint64(e.BlockNumber)

	// Field (7) 'GasLimit'
	hh.PutUint64(e.GasLimit)

	// Field (8) 'GasUsed'
	hh.PutUint64(e.GasUsed)

	// Field (9) 'Timestamp'
	hh.PutUint64(e.Timestamp)

	// Field (10) 'ExtraData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.ExtraData))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(e.ExtraData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (11) 'BaseFeePerGas'
	if len(e.BaseFeePerGas) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.BaseFeePerGas)

	// Field (12) 'BlockHash'
	if len(e.BlockHash) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.BlockHash)

	// Field (13) 'Transactions'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Transactions))
		if num > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Transactions {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1073741824 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1073741824+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1048576)
	}

	// Field (14) 'BlobTransactions'
	{
		subIndx := hh.Index()
		num := uint64(len(e.BlobTransactions))
		if num > 1073741824 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.BlobTransactions {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1073741824)
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the SignedBlobTransaction object
func (s *SignedBlobTransaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedBlobTransaction object to a target array
func (s *SignedBlobTransaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(69)

	// Offset (0) 'Header'
	dst = ssz.WriteOffset(dst, offset)
	if s.Header == nil {
		s.Header = new(BlobTransaction)
	}
	offset += s.Header.SizeSSZ()

	// Field (1) 'Signatures'
	if s.Signatures == nil {
		s.Signatures = new(ECDSASignature)
	}
	if dst, err = s.Signatures.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (0) 'Header'
	if dst, err = s.Header.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedBlobTransaction object
func (s *SignedBlobTransaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 69 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Header'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 69 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signatures'
	if s.Signatures == nil {
		s.Signatures = new(ECDSASignature)
	}
	if err = s.Signatures.UnmarshalSSZ(buf[4:69]); err != nil {
		return err
	}

	// Field (0) 'Header'
	{
		buf = tail[o0:]
		if s.Header == nil {
			s.Header = new(BlobTransaction)
		}
		if err = s.Header.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedBlobTransaction object
func (s *SignedBlobTransaction) SizeSSZ() (size int) {
	size = 69

	// Field (0) 'Header'
	if s.Header == nil {
		s.Header = new(BlobTransaction)
	}
	size += s.Header.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedBlobTransaction object
func (s *SignedBlobTransaction) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedBlobTransaction object with a hasher
func (s *SignedBlobTransaction) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Header'
	if err = s.Header.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signatures'
	if err = s.Signatures.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the BlobTransaction object
func (b *BlobTransaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlobTransaction object to a target array
func (b *BlobTransaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(140)

	// Field (0) 'Nounce'
	dst = ssz.MarshalUint64(dst, b.Nounce)

	// Field (1) 'Gas'
	dst = ssz.MarshalUint64(dst, b.Gas)

	// Field (2) 'MaxBasefee'
	if len(b.MaxBasefee) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.MaxBasefee...)

	// Field (3) 'PriorityFee'
	if len(b.PriorityFee) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.PriorityFee...)

	// Field (4) 'Address'
	if len(b.Address) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.Address...)

	// Field (5) 'Value'
	if len(b.Value) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.Value...)

	// Offset (6) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Data)

	// Offset (7) 'BlobVersionedHashes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.BlobVersionedHashes) * 32

	// Field (6) 'Data'
	if len(b.Data) > 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.Data...)

	// Field (7) 'BlobVersionedHashes'
	if len(b.BlobVersionedHashes) > 16777216 {
		err = ssz.ErrListTooBig
		return
	}
	for ii := 0; ii < len(b.BlobVersionedHashes); ii++ {
		if len(b.BlobVersionedHashes[ii]) != 32 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, b.BlobVersionedHashes[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BlobTransaction object
func (b *BlobTransaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 140 {
		return ssz.ErrSize
	}

	tail := buf
	var o6, o7 uint64

	// Field (0) 'Nounce'
	b.Nounce = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Gas'
	b.Gas = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'MaxBasefee'
	if cap(b.MaxBasefee) == 0 {
		b.MaxBasefee = make([]byte, 0, len(buf[16:48]))
	}
	b.MaxBasefee = append(b.MaxBasefee, buf[16:48]...)

	// Field (3) 'PriorityFee'
	if cap(b.PriorityFee) == 0 {
		b.PriorityFee = make([]byte, 0, len(buf[48:80]))
	}
	b.PriorityFee = append(b.PriorityFee, buf[48:80]...)

	// Field (4) 'Address'
	if cap(b.Address) == 0 {
		b.Address = make([]byte, 0, len(buf[80:100]))
	}
	b.Address = append(b.Address, buf[80:100]...)

	// Field (5) 'Value'
	if cap(b.Value) == 0 {
		b.Value = make([]byte, 0, len(buf[100:132]))
	}
	b.Value = append(b.Value, buf[100:132]...)

	// Offset (6) 'Data'
	if o6 = ssz.ReadOffset(buf[132:136]); o6 > size {
		return ssz.ErrOffset
	}

	if o6 < 140 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (7) 'BlobVersionedHashes'
	if o7 = ssz.ReadOffset(buf[136:140]); o7 > size || o6 > o7 {
		return ssz.ErrOffset
	}

	// Field (6) 'Data'
	{
		buf = tail[o6:o7]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(b.Data) == 0 {
			b.Data = make([]byte, 0, len(buf))
		}
		b.Data = append(b.Data, buf...)
	}

	// Field (7) 'BlobVersionedHashes'
	{
		buf = tail[o7:]
		num, err := ssz.DivideInt2(len(buf), 32, 16777216)
		if err != nil {
			return err
		}
		b.BlobVersionedHashes = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			if cap(b.BlobVersionedHashes[ii]) == 0 {
				b.BlobVersionedHashes[ii] = make([]byte, 0, len(buf[ii*32:(ii+1)*32]))
			}
			b.BlobVersionedHashes[ii] = append(b.BlobVersionedHashes[ii], buf[ii*32:(ii+1)*32]...)
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlobTransaction object
func (b *BlobTransaction) SizeSSZ() (size int) {
	size = 140

	// Field (6) 'Data'
	size += len(b.Data)

	// Field (7) 'BlobVersionedHashes'
	size += len(b.BlobVersionedHashes) * 32

	return
}

// HashTreeRoot ssz hashes the BlobTransaction object
func (b *BlobTransaction) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlobTransaction object with a hasher
func (b *BlobTransaction) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Nounce'
	hh.PutUint64(b.Nounce)

	// Field (1) 'Gas'
	hh.PutUint64(b.Gas)

	// Field (2) 'MaxBasefee'
	if len(b.MaxBasefee) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.MaxBasefee)

	// Field (3) 'PriorityFee'
	if len(b.PriorityFee) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.PriorityFee)

	// Field (4) 'Address'
	if len(b.Address) != 20 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.Address)

	// Field (5) 'Value'
	if len(b.Value) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.Value)

	// Field (6) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(b.Data))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(b.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (7) 'BlobVersionedHashes'
	{
		if len(b.BlobVersionedHashes) > 16777216 {
			err = ssz.ErrListTooBig
			return
		}
		subIndx := hh.Index()
		for _, i := range b.BlobVersionedHashes {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		numItems := uint64(len(b.BlobVersionedHashes))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(16777216, numItems, 32))
	}

	hh.Merkleize(indx)
	return
}

// MarshalSSZ ssz marshals the ECDSASignature object
func (e *ECDSASignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ECDSASignature object to a target array
func (e *ECDSASignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'V'
	if len(e.V) != 1 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.V...)

	// Field (1) 'R'
	if len(e.R) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.R...)

	// Field (2) 'S'
	if len(e.S) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, e.S...)

	return
}

// UnmarshalSSZ ssz unmarshals the ECDSASignature object
func (e *ECDSASignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 65 {
		return ssz.ErrSize
	}

	// Field (0) 'V'
	if cap(e.V) == 0 {
		e.V = make([]byte, 0, len(buf[0:1]))
	}
	e.V = append(e.V, buf[0:1]...)

	// Field (1) 'R'
	if cap(e.R) == 0 {
		e.R = make([]byte, 0, len(buf[1:33]))
	}
	e.R = append(e.R, buf[1:33]...)

	// Field (2) 'S'
	if cap(e.S) == 0 {
		e.S = make([]byte, 0, len(buf[33:65]))
	}
	e.S = append(e.S, buf[33:65]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ECDSASignature object
func (e *ECDSASignature) SizeSSZ() (size int) {
	size = 65
	return
}

// HashTreeRoot ssz hashes the ECDSASignature object
func (e *ECDSASignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ECDSASignature object with a hasher
func (e *ECDSASignature) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'V'
	if len(e.V) != 1 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.V)

	// Field (1) 'R'
	if len(e.R) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.R)

	// Field (2) 'S'
	if len(e.S) != 32 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(e.S)

	hh.Merkleize(indx)
	return
}
